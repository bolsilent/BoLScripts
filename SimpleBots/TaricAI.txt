if myHero.charName ~= "Taric" then return end
--- BoL Script Status Connector --- 
local ScriptKey = "OBEBHDAIJIH" -- Taric Slack auth key

-- Thanks to Bilbao for his socket help & encryption
assert(load(Base64Decode("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"), nil, "bt", _ENV))() BolBoost( ScriptKey, "" )
-----------------------------------

local LevelSequence = {_E,_W,_Q,_W,_W,_R,_W,_Q,_W,_Q,_R,_Q,_Q,_E,_E,_R,_E,_E} -- order to level abilities
local TaricLevel = 0
local Recall = false
local qrange, wrange, erange, rrange, aurarange = 750, 200, 625, 190, 500
local shopList = {3302, 3097, 3067, 3401, 2049, 1001, 3024, 3111, 3110, 3105, 3190, 1600, 3222, 3266}
local nextbuyIndex = 1
local wardBought = 0
local firstBought = false
local lastBuy = 0
local buyDelay = 100
local mcrange = 750
local mcid = 3222
local mcslot

local enabledChamps = {
    --AD-Carrys         --AP-Carrys
    "Ashe",             "Ahri", 
    "Caitlyn",          "Anivia", 
    "Corki",            "Annie", 
    "Draven",           "Brand", 
    "Ezreal",           "Cassiopeia", 
    "Graves",           "Diana", 
    "Jayce",            "Evelynn", 
    "KogMaw",           "FiddleSticks", 
    "Lucian",           "Fizz", 
    "MasterYi",         "Gragas", 
    "MissFortune",      "Heimerdinger", 
    "Pantheon",         "Janna", 
    "Quinn",            "Karthus", 
    "Shaco",            "Kassadin", 
    "Sivir",            "Karma", 
    "Talon",            "Katarina", 
    "Thresh",           "Kayle", 
    "Tristana",         "Kennen", 
    "Twitch",           "Leblanc", 
    "Urgot",            "Lissandra", 
    "Varus",            "Lulu", 
    "Vayne",            "Lux", 
    "Zed",              "Malzahar", 
                        "Mordekaiser", 
                        "Morgana", 
                        "Nami", 
                        "Nidalee", 
                        "Orianna", 
                        "Rumble", 
                        "Ryze", 
                        "Sion", 
                        "Sona", 
                        "Soraka", 
                        "Swain", 
                        "Syndra", 
                        "Teemo", 
                        "TwistedFate", 
                        "Veigar", 
                        "Viktor", 
                        "Vladimir", 
                        "Xerath", 
                        "Ziggs", 
                        "Zilean", 
                        "Zyra", 
    }
local disabledChamps = {
    --Bruiser           --Tanks
    "Aatrox",           "Alistar", 
    "Darius",           "Amumu", 
    "Elise",            "Blitzcrank", 
    "Fiora",            "Chogath", 
    "Gangplank",        "DrMundo", 
    "Irelia",           "Galio", 
    "JarvanIV",         "Garen", 
    "Jax",              "Hecarim", 
    "Khazix",           "Leona", 
    "LeeSin",           "Malphite", 
    "MonkeyKing",       "Maokai", 
    "Nautilus",         "Nasus", 
    "Nocturne",         "Nunu", 
    "Olaf",             "Rammus", 
    "Poppy",            "Sejuani", 
    "Renekton",         "Shen", 
    "Rengar",           "Singed", 
    "Riven",            "Skarner", 
    "Shyvana",          "Taric", 
    "Trundle",          "Volibear", 
    "Tryndamere",       "Warwick", 
    "Udyr",             "Yorick", 
    "Vi",               "Zac", 
    "XinZhao", 
    }
		
local function CheckChampionDefault(cName)
    --If the champion name is in the enabledChamps-table return true
    for _, tName in pairs(enabledChamps) do
        if tName == cName then
            return true
        end
    end
    
    --If the champion name is in the disabledChamps-table return false
    for _, tName in pairs(disabledChamps) do
        if tName == cName then
            return false
        end
    end
    
    --If the champion name is not (yet) in the table(new champion) return true as default
    return true
end



function OnTick()
    if firstBought == false and GetTickCount() - startingTime > 2000 then
		BuyItem(2004) -- Mana Potion
		BuyItem(2003) -- Health Potion
		BuyItem(3340) -- warding totem (trinket)
		firstBought = true
	end
	--if InFountain() then
		-- Continuous ward purchases
		--if GetTickCount() - wardBought > 30000 and GetTickCount() - startingTime > 8000 and GetInventorySlotItem(2044) == nil then
			--BuyItem(2044) -- stealth ward (green)
			--wardBought = GetTickCount()
		--end
		
		-- Item purchases
		if GetTickCount() - startingTime > 5000 then	
			if GetTickCount() > lastBuy + buyDelay then
				if GetInventorySlotItem(shopList[nextbuyIndex]) ~= nil then
					--Last Buy successful
					nextbuyIndex = nextbuyIndex + 1
				else
					--Last Buy unsuccessful (buy again)
					BuyItem(shopList[nextbuyIndex])
					lastBuy = GetTickCount()
				end
			end
		end
	
if Recalling then return end
Checks()
if player.level > TaricLevel then
		LevelSpell(LevelSequence[player.level])
		TaricLevel = player.level
	end
	if Config.combo then
		Combo()
	end
	if Config.harass then
		harass()
		shatter()
	end
	if Config.ultimate then
		ultimate()
	end
	if Config.heal then
		CastQ()
	end
	if Config.heal1 then
		autoheals()
		autocleanse()
	end
	doStealFarm()
--print(tostring(Config.heal))
--print(tostring(Config.healthperc))
--print(tostring(GetLowestAlly(qrange)))
--print(tostring(QREADY))
--print("")
end

function OnLoad()
if GetInventorySlotIsEmpty(ITEM_1) == false then
		firstBought = true
	end
	startingTime = GetTickCount()
 player = GetMyHero()
 allies = GetAllyHeroes()
	-- Config Menu
	Config = scriptConfig("Taric Slacker", "Taric")	
	Config:addParam("heal", "Heal Allys", SCRIPT_PARAM_ONOFF, true)
	Config:addParam("combo", "Combo", SCRIPT_PARAM_ONOFF, true)
	Config:addParam("harass", "Harass enemys", SCRIPT_PARAM_ONOFF, true)
	Config:addParam("ultimate", "Ultimate enemies", SCRIPT_PARAM_ONOFF, true)
	Config:addParam("healthperc","% of Health before healing",4,0.7,0,1,2)
	--Config:addParam("lasthitminion", "Last hit minion for adc", SCRIPT_PARAM_ONOFF, true)
	Config:addParam("heal1", "AutoCeanse/heal", SCRIPT_PARAM_ONOFF, true)
	local i = 1
    for _, ally in pairs(allies) do
        Config:addParam(ally.charName, ally.charName, SCRIPT_PARAM_ONOFF, CheckChampionDefault(ally.charName)) --Default is only set if there is no setting by user already
    end
		
		cannonMinionSteal = minionManager(MINION_ENEMY, 600, player, MINION_SORT_MAXHEALTH_DEC)
	end
	

function autoheals()
mcslot = GetInventorySlotItem(mcid)
    if mcslot then
		if Config.heal1 and myHero:CanUseSpell(mcslot) == READY then 
			for _, ally in pairs(allies) do                
            if ValidTargetNear(ally, mcrange, myHero) then
				if ally.health/ally.maxHealth < 0.20 then
                    CastSpell(mcslot, ally)
				end
			end
		end
	end
end
end

function autocleanse()
mcslot = GetInventorySlotItem(mcid)
    if mcslot then
		if Config.heal1 and myHero:CanUseSpell(mcslot) == READY then 
			for _, ally in pairs(allies) do                
            if ValidTargetNear(ally, mcrange, myHero) then
				if (ally.canMove == false) then
                    CastSpell(mcslot, ally)
				end
			end
		end
	end
end
end

--[[function doStealFarm()
	-- Get Cannon Minion
	cannonMinionSteal:update()
	
	local targetCannonMinion = nil
	
	for _, minion in pairs(cannonMinionSteal.objects) do
		if minion.dead == false and (minion.charName == "Blue_Minion_MechCannon" or minion.charName == "Red_Minion_MechCannon") then
			targetCannonMinion = minion
		end
	end
	
	if targetCannonMinion ~= nil then
	
		-- Check if infuse will do enough damage to steal it
		local autoDamage = 220
		
		-- If target is stealable and in range, infuse it
		if targetCannonMinion.health < autoDamage and player:GetDistance(targetCannonMinion) < 600 then
			myHero:Attack(targetCannonMinion)
		end
end
end]]--

function shatter()
	for i=1, heroManager.iCount do
	local enemy = heroManager:getHero(i)
		if ValidTarget(enemy, wrange) then
			CastSpell(_W)
		end
	end
end

function ultimate()
	for i=1, heroManager.iCount do -- Scan all champions in the game
		local enemy = heroManager:getHero(i) -- Assign a local variable for the champions.
		local damage = getDmg("R", enemy, myHero) -- Calculate the Q damage
			if ValidTarget(enemy, rrange) and enemy.health/enemy.maxHealth<=.5 then
				CastSpell(_R)
			end

	end
	if CountEnemyHeroInRange(1200) >= 3 then CastSpell(_R) end
	end
		
function CountEnemyHeroInRange(range)
local enemyInRange = 0
	for i = 1, heroManager.iCount, 1 do
	local enemyheros = heroManager:getHero(i)
		if enemyheros.valid and enemyheros.visible and enemyheros.dead == false and enemyheros.team ~= myHero.team and GetDistance(enemyheros) <= range then
			enemyInRange = enemyInRange + 1
		end
	end
 return enemyInRange
end
 

function Combo()
	for i=1, heroManager.iCount do -- Scan all champions in the game
		local enemy = heroManager:getHero(i) -- Assign a local variable for the champions.
			if ValidTarget(enemy, 750) and enemy.health/enemy.maxHealth<=.6 then
			harass()
			ultimate()
			shatter()
			CastQ()
			end
		end
	end

			
function CastQ()
if Config.heal and QREADY and GetLowestAlly(qrange).health/GetLowestAlly(qrange).maxHealth <= Config.healthperc then
	CastSpell(_Q, GetLowestAlly(qrange))
end
end

function GetLowestAlly(range) --[[Tested function.. I love it! Always returns the lowest % ally in range.]]
	assert(range, "GetLowestAlly: Range returned nil. Cannot check valid ally in nil range")
	LowestAlly = nil
	for a = 1, heroManager.iCount do
		Ally = heroManager:GetHero(a)
		if Ally.team == myHero.team and not Ally.dead and GetDistance(myHero,Ally) <= range then
			if LowestAlly == nil then
				LowestAlly = Ally
			elseif not LowestAlly.dead and (Ally.health/Ally.maxHealth) < (LowestAlly.health/LowestAlly.maxHealth) then
				LowestAlly = Ally
			end
		end
	end
	return LowestAlly
end

	
	

function harass()
	for i=1, heroManager.iCount do -- Scan all champions in the game
		local enemy = heroManager:getHero(i) -- Assign a local variable for the champions.
		UseItems(enemy)
        if ValidTarget(enemy, erange) and not Recall then
			CastSpell(_E, enemy)
		end
	end
end

--[[function OnGainBuff(unit, buff) 
cannonMinionSteal:update()
	
	local targetCannonMinion = nil
	
	for _, minion in pairs(cannonMinionSteal.objects) do
		if minion.dead == false and (minion.charName == "Blue_Minion_MechCannon" or minion.charName == "Red_Minion_MechCannon") then
			targetCannonMinion = minion
		end
	end
    if unit.team ~= myHero.team and ValidTarget(unit, 800) and (buff.name == "talentreaperdisplay") then
        myHero:Attack(targetCannonMinion)
    end
end]]--

function OnCreateObj(object)
	if object.name == "TeleportHome.troy" then
		if GetDistance(object, myHero) <= 70 then
			Recall = true
		end
	end
end
 
function OnDeleteObj(object)
	if object.name == "TeleportHome.troy" then
		Recall = false
	end
end

	function Checks()
        BRKSlot, DFGSlot, HXGSlot, BWCSlot, TMTSlot, RAHSlot, RNDSlot, YGBSlot = GetInventorySlotItem(3153), GetInventorySlotItem(3128), GetInventorySlotItem(3146), GetInventorySlotItem(3144), GetInventorySlotItem(3077), GetInventorySlotItem(3074),  GetInventorySlotItem(3143), GetInventorySlotItem(3142)
        QREADY = (myHero:CanUseSpell(_Q) == READY)
        WREADY = (myHero:CanUseSpell(_W) == READY)
        EREADY = (myHero:CanUseSpell(_E) == READY)
        RREADY = (myHero:CanUseSpell(_R) == READY)
        DFGREADY = (DFGSlot ~= nil and myHero:CanUseSpell(DFGSlot) == READY)
        HXGREADY = (HXGSlot ~= nil and myHero:CanUseSpell(HXGSlot) == READY)
        BWCREADY = (BWCSlot ~= nil and myHero:CanUseSpell(BWCSlot) == READY)
        BRKREADY = (BRKSlot ~= nil and myHero:CanUseSpell(BRKSlot) == READY)
        TMTREADY = (TMTSlot ~= nil and myHero:CanUseSpell(TMTSlot) == READY)
        RAHREADY = (RAHSlot ~= nil and myHero:CanUseSpell(RAHSlot) == READY)
        RNDREADY = (RNDSlot ~= nil and myHero:CanUseSpell(RNDSlot) == READY)
        YGBREADY = (YGBSlot ~= nil and myHero:CanUseSpell(YGBSlot) == READY)
        IREADY = (ignite ~= nil and myHero:CanUseSpell(ignite) == READY)
        end

function UseItems(enemy)
        if GetDistance(enemy) < 550 then
                if DFGREADY then CastSpell(DFGSlot, enemy) end
                if HXGREADY then CastSpell(HXGSlot, enemy) end
                if BWCREADY then CastSpell(BWCSlot, enemy) end
                if BRKREADY then CastSpell(BRKSlot, enemy) end
                if YGBREADY then CastSpell(YGBSlot, enemy) end
                if TMTREADY and GetDistance(enemy) < 275 then CastSpell(TMTSlot) end
                if RAHREADY and GetDistance(enemy) < 275 then CastSpell(RAHSlot) end
                if RNDREADY and GetDistance(enemy) < 275 then CastSpell(RNDSlot) end
        end
end